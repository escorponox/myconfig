let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/projects/LECFront
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
argglobal
%argdel
edit src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/ScanningExclusionsListPage.hooks.tsx
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe 'vert 1resize ' . ((&columns * 127 + 128) / 256)
exe 'vert 2resize ' . ((&columns * 128 + 128) / 256)
argglobal
balt ~/projects/LECFront/src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/hooks/useExclusionsListData/useExclusionsListData.typed.tsx
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 93 - ((65 * winheight(0) + 33) / 66)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 93
normal! 02|
wincmd w
argglobal
if bufexists("~/projects/LECFront/src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/hooks/useExclusionsListData/useExclusionsListData.typed.tsx") | buffer ~/projects/LECFront/src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/hooks/useExclusionsListData/useExclusionsListData.typed.tsx | else | edit ~/projects/LECFront/src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/hooks/useExclusionsListData/useExclusionsListData.typed.tsx | endif
if &buftype ==# 'terminal'
  silent file ~/projects/LECFront/src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/hooks/useExclusionsListData/useExclusionsListData.typed.tsx
endif
balt src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/ScanningExclusionsListPage.hooks.tsx
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let &fdl = &fdl
let s:l = 39 - ((21 * winheight(0) + 33) / 66)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 39
normal! 012|
wincmd w
exe 'vert 1resize ' . ((&columns * 127 + 128) / 256)
exe 'vert 2resize ' . ((&columns * 128 + 128) / 256)
tabnext 1
badd +77 src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/ScanningExclusionsListPage.hooks.tsx
badd +0 ~/projects/LECFront/src/App/Scanning/ScanningExclusions/ScanningExclusionsListPage/hooks/useExclusionsListData/useExclusionsListData.typed.tsx
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOFc
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
